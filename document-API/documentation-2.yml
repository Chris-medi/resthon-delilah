openapi: 3.0.0
info:
  description: this is a project of api to restaurant
                
  version: "1.0.0"
  title: Delilah Reston
  contact:
    email: ccfranm17@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Chris-medi/delilah-reston/1.0.0
  - description: deploy project
    url: https://delilah-reston.herokuapp.com
  - description: Delilah reston API 
    url: https://localhost:3060
  - url: 'http://localhost:3000'
tags:
  - name: User
    description: Everything about your user
  - name: Product
    description: about product
  - name: order
    description: about Orders 
paths:
  /api/singup:
    post:
      tags:
        - user
      summary: Add a new user to database
      description: the people create new user on database
      operationId: addUser
      responses:
        '400':
          description: data invalid
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response400'
        '405':
          description: email already exisits
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/response405'
                
        '500':
          description: server error
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/response500'
        '200':
          description: user add successful
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/signupResponse200'
      requestBody:
        $ref: '#/components/requestBodies/newUser'
   
 
  /api/signin:
    post:
      tags:
        - user
      description: user signin get token of validatio for future
      summary: get all about information
      requestBody:
        $ref: '#/components/requestBodies/signin'
      responses:
        '200':
          description: operation successful
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/signinResponse200'
        '500':
          description: server errror
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response500'
        '404':
          description: email not found
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response404'
        '401':
          description: password incorretly
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response401'
  /api/user:
    get:
      tags:
        - user
      operationId: getUserBytoken
      description: user get all about your information
      summary: get all info user
      parameters:
        - name: authorization
          in: header
          required: true
          description: with token get informacion
          schema:
              type: string
      responses:
        '500':
          description: server error
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response500'
        '400':
          description: token required
          content: 
            aplication/json:
              schema:
               type: object
               properties:
                  message:
                    type: string
        '200':
            description: found user
            content:
              aplication/json:
                schema:
                  type: object
                  properties:
                    messaje:
                      type: string
                    data:
                      type: object
                      properties:
                        email:
                          type: string
                          example: carlitos@gmail.com
                        fullName:
                          type: string
                          example: carlos vargas
                        userName:
                          type: string
                          example: carlos
                        password:
                          type: string
                          example: hashPassword
                        rol: 
                          type: boolean
                          example: 1 o 0
                          
  /api/products:
    get:
      tags:
        - product
      description: get all available products 
      summary: get product
      responses:
        '500':
          description: server error
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/response500'
        '200':
          description: all product
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/product'
                       
                      
  /api/product:
    post:
      tags:
       - product
      description: user admin create a new product
      summary: createNewUser
      parameters:
        - name: authorization
          in: header
          required: true
          description: with token validate rol
          schema:
            type: string
          
      requestBody:
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '500':
          description: server Error
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response500'
                        
        '400':
          description: data invalid
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response400'
        '200':
          description: operation successful
          content:
            aplicatin/json:
              schema:
                $ref: '#/components/schemas/response200'
        
    put:
      tags:
        - product
      description:  admin user can update product
      summary: updateProduct
      parameters:
        - name: authorization
          in: header
          required: true
          description: with token get informacion
          schema:
            type: string
      requestBody:
        content: 
          aplication/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '500':
          description: server error
          content:
              aplication/json:
                schema:
                   $ref: '#/components/schemas/response500'
        '403':
          description: not allow
          content:
              aplication/json:
                schema:
                  $ref: '#/components/schemas/response403'
        '400':
          description: data invalid
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response400'
        '200':
          description: update successful
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response200'
      
        
                
  '/api/product/{id}':            
    delete:
      tags:
        - product
      description: admin user delete a product by id on path
      summary: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          description: id identification product
          schema:
            type: integer
      responses:
        '500':
          description: server error
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response500'
        '403':
          description: not allow
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response403'
        '400':
          description: id required
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response401'
        '401':
          description: token required
          content: 
            aplication/json:
              schema:
                $ref: '#/components/schemas/response401'
        '200':
          description: operation successful
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/response200'
                
          
      
  /api/order:
    get:
        tags:
          - order
        description:  admin user get all list order
        summary: getOrder
        parameters:
          - name: authorization
            in: header
            required: true
            description: with token get informacion
            schema:
              type: string        
        responses:
         '500':
          description: server error
          content:
            aplication/json:
              schema: 
                $ref: '#/components/schemas/response500'
        
        
        
components:


  schemas:
  
    product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        link_imagen:
          type: string
          example: hhtp//link-imagen
        name: 
          type: string
          example: hamburguesa
        price:
          type: integer
          example: 8000
          
  
  
    newUser:
      type: object
      required:
        - all
      properties:
        fullName:
          type: string
          example: Carlos vargas
        email:
          type: string
          example: carlitos@gmail.com
        password:
          type: string
          example: 123456
        userName:
          type: string
          example: carlos
    signinResponse200:
            type: object
            properties:
              message:
                type: string
                format: uft8
              data:
                type: object
                properties:
                  message:
                    type: string
                    format: uft8
                  email:
                    type: string
                    format: uft8  
              token:
               type: string
               format: uft8
    response400:
        type: object
        properties:
          message: 
            type: string
          error:
            type: string
    response403:
      type: object
      properties:
        message:
          type: string
        
    response405:
      type: object
      properties:
        message:
          type: string
          
    response500:
      type: object
      properties:
        message:
          type: string
    
    response404:
      type: object
      properties:
        message:
          type: string
    
    response401:
      type: object
      properties:
        message:
          type: string
    
    response200:
      type: object
      properties:
        message:
          type: string
    
    
          
    signupResponse200:
      type: object
      properties:
        message:
          type: string
        
        

      
  requestBodies:
    signin:
      content:
        aplication/json:
          schema:
           type: object
           properties: 
              email:
                type: string
                example: carlitos@gmail.com
              password:
                type: string
                example: 123456
  
    newUser:
      required: true
      description: the object that need to be a new user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/newUser'